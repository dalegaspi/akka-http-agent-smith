akka {
  loglevel = DEBUG
  log-config-on-start = off
  jvm-exit-on-fatal-error = off

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    debug {
        receive = on
        autoreceive = on
        lifecycle = on
    }
  }

  http.server.request-timeout = "5 s"
}

http {
  host = "0.0.0.0"
  port = 1138
  swagger.host = "localhost"
  version = "0.1"
  request.timeout = "5 seconds"
}

everest {
  circuit.breakers {
    metadata {
      max.failures = 5
      call.timeout = "3 seconds"
      reset.timeout = "1 minute"
    }

    carousels {
      max.failures = 5
      call.timeout = "3 seconds"
      reset.timeout = "1 minute"
    }
  }

  services {
    timeouts {
      http {
        get = "3 seconds"
        post = "3 seconds"
      }
    }
  }
}


# Kamon Metrics
# ~~~~~~~~~~~~~~

kamon {

  metric {

    # Time interval for collecting all metrics and send the snapshots to all subscribed actors.
    tick-interval = 10 seconds

    # Disables a big error message that will be typically logged if your application wasn't started
    # with the -javaagent:/path-to-aspectj-weaver.jar option. If you are only using KamonStandalone
    # it might be ok for you to turn this error off.
    disable-aspectj-weaver-missing-error = false

    # Specify if entities that do not match any include/exclude filter should be tracked.
    track-unmatched-entities = yes

    filters {
      akka-actor {
        includes = ["agent-smith/user/**"]
        excludes = ["*/system/**", "*/user/IO-**", "*kamon*"]
      }

      akka-router {
        includes = ["*/user/*"]
        excludes = []
      }

      akka-dispatcher {
        includes = ["*/user/*"]
        excludes = []
      }

      trace {
        includes = [ "**" ]
        excludes = [ ]
      }
    }
  }

  # Controls whether the AspectJ Weaver missing warning should be displayed if any Kamon module requiring AspectJ is
  # found in the classpath but the application is started without the AspectJ Weaver.
  show-aspectj-missing-warning = yes

  statsd {

    subscriptions {
        #histogram       = [ "**" ]
        #min-max-counter = [ "**" ]
        #gauge           = [ "**" ]
        #counter         = [ "**" ]
        #trace           = [ "**" ]
        #trace-segment   = [ "**" ]
        #akka-actor      = [ "**" ]
        #akka-dispatcher = [ "**" ]
        #akka-router     = [ "**" ]
        #system-metric   = [ "**" ]
        #http-server     = [ "**" ]
        akka-http     = [ "**" ]
      }

    metric-sender-factory = "kamon.statsd.SimpleStatsDMetricsSender"

    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "127.0.0.1"
    port = 32769

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = 10 seconds

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes


    # FQCN of the implementation of `kamon.statsd.MetricKeyGenerator` to be instantiated and used for assigning
    # metric names. The implementation must have a single parameter constructor accepting a `com.typesafe.config.Config`.
    metric-key-generator = kamon.statsd.SimpleMetricKeyGenerator

    simple-metric-key-generator {

      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "everest-kamon"

      # Includes the name of the hostname in the generated metric. When set to false, the scheme for the metrics
      # will look as follows:
      #    application.entity.entity-name.metric-name
      include-hostname = true

      # Allow users to override the name of the hostname reported by kamon. When changed, the scheme for the metrics
      # will have the following pattern:
      #   application.hostname-override-value.entity.entity-name.metric-name
      #hostname-override = rigby

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = normalize
    }
  }

  # modules can be disabled at startup using yes/no arguments.
  modules {
    kamon-log-reporter.auto-start = no
    kamon-system-metrics.auto-start = yes
    kamon-statsd.auto-start = yes
    kamon-akka.auto-start = yes
  }

}
